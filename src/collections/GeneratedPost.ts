import { CollectionConfig } from 'payload/types'

export const GeneratedPost: CollectionConfig = {
  slug: 'generated-posts',
  admin: {
    useAsTitle: 'title',
    defaultColumns: ['title', 'company', 'writingStyle', 'status', 'scheduledFor', 'publishedAt'],
  },
  access: {
    read: ({ req: { user } }) => {
      if (user?.role === 'admin') return true
      if (user?.role === 'manager') return true
      return {
        company: {
          equals: user?.company,
        },
      }
    },
    create: ({ req: { user } }) => {
      return user?.role === 'admin' || user?.role === 'manager' || user?.role === 'content_creator'
    },
    update: ({ req: { user } }) => {
      if (user?.role === 'admin') return true
      if (user?.role === 'manager') return true
      if (user?.role === 'reviewer') return true
      return {
        company: {
          equals: user?.company,
        },
      }
    },
    delete: ({ req: { user } }) => {
      return user?.role === 'admin' || user?.role === 'manager'
    },
  },
  fields: [
    {
      name: 'company',
      type: 'relationship',
      relationTo: 'companies',
      required: true,
    },
    {
      name: 'referencePost',
      type: 'relationship',
      relationTo: 'reference-posts',
    },
    {
      name: 'title',
      type: 'text',
      required: true,
    },
    {
      name: 'content',
      type: 'richText',
      required: true,
    },
    {
      name: 'writingStyle',
      type: 'select',
      required: true,
      options: [
        { label: 'Story Based', value: 'story_based' },
        { label: 'Insight Focused', value: 'insight_focused' },
        { label: 'Engagement Focused', value: 'engagement_focused' },
      ],
    },
    {
      name: 'category',
      type: 'select',
      required: true,
      options: [
        { label: 'Thought Leadership', value: 'thought_leadership' },
        { label: 'Industry Insights', value: 'industry_insights' },
        { label: 'Company Updates', value: 'company_updates' },
        { label: 'Educational', value: 'educational' },
        { label: 'Behind the Scenes', value: 'behind_scenes' },
        { label: 'Case Studies', value: 'case_studies' },
      ],
    },
    {
      name: 'status',
      type: 'select',
      options: [
        { label: 'Draft', value: 'draft' },
        { label: 'Review', value: 'review' },
        { label: 'Approved', value: 'approved' },
        { label: 'Scheduled', value: 'scheduled' },
        { label: 'Published', value: 'published' },
        { label: 'Rejected', value: 'rejected' },
      ],
      defaultValue: 'draft',
    },
    {
      name: 'aiPrompt',
      type: 'textarea',
      admin: {
        description: 'AI prompt used for generation',
      },
    },
    {
      name: 'aiModel',
      type: 'text',
      admin: {
        description: 'AI model used for generation',
      },
    },
    {
      name: 'generatedAt',
      type: 'date',
      admin: {
        description: 'When this post was generated by AI',
      },
    },
    {
      name: 'reviewedBy',
      type: 'relationship',
      relationTo: 'users',
      admin: {
        description: 'User who reviewed this post',
      },
    },
    {
      name: 'reviewComments',
      type: 'textarea',
      admin: {
        description: 'Comments from the reviewer',
      },
    },
    {
      name: 'reviewedAt',
      type: 'date',
      admin: {
        description: 'When this post was reviewed',
      },
    },
    {
      name: 'scheduledFor',
      type: 'date',
      admin: {
        description: 'When this post is scheduled to be published',
      },
    },
    {
      name: 'publishedAt',
      type: 'date',
      admin: {
        description: 'When this post was actually published',
      },
    },
    {
      name: 'linkedinPostId',
      type: 'text',
      admin: {
        description: 'LinkedIn post ID after publication',
      },
    },
    {
      name: 'images',
      type: 'array',
      fields: [
        {
          name: 'image',
          type: 'upload',
          relationTo: 'media',
        },
      ],
    },
    {
      name: 'tags',
      type: 'array',
      fields: [
        {
          name: 'tag',
          type: 'text',
        },
      ],
    },
    {
      name: 'performance',
      type: 'relationship',
      relationTo: 'post-analytics',
      hasMany: true,
      admin: {
        description: 'Performance analytics for this post',
      },
    },
  ],
  timestamps: true,
  hooks: {
    beforeChange: [
      ({ data, operation }) => {
        // Status transition validation
        if (operation === 'update' && data.status) {
          const validTransitions = {
            draft: ['review', 'rejected'],
            review: ['approved', 'rejected', 'draft'],
            approved: ['scheduled', 'draft'],
            scheduled: ['published', 'draft'],
            published: [], // Terminal state
            rejected: ['draft'],
          }

          // This would need to be implemented with the previous status
          // For now, we'll just validate the status value
          const validStatuses = [
            'draft',
            'review',
            'approved',
            'scheduled',
            'published',
            'rejected',
          ]
          if (!validStatuses.includes(data.status)) {
            throw new Error(`Invalid status: ${data.status}`)
          }
        }

        // Set generatedAt when AI content is created
        if (data.aiModel && !data.generatedAt) {
          data.generatedAt = new Date().toISOString()
        }

        return data
      },
    ],
  },
}
